// Generated by CoffeeScript 1.12.5
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = (function(superClass) {
    var Collection, LIMIT, TIMEOUT;

    extend(_Class, superClass);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    TIMEOUT = 10000;

    LIMIT = 5;

    _Class.prototype.events = {
      "click": function() {
        var ref, ref1;
        if (!(((ref = this.xhr) != null ? ref.state() : void 0) === "pending" || ((ref1 = this.xhr) != null ? ref1.state() : void 0) === "rejected")) {
          return this.xhr = this.col.fetch();
        }
      }
    };

    _Class.prototype.initialize = function(opts) {
      var ref, ref1;
      if (opts == null) {
        opts = {};
      }
      this.toggle(false);
      this.col = new Collection(null, {
        timeout: (ref = opts.timeout) != null ? ref : TIMEOUT,
        limit: (ref1 = opts.limit) != null ? ref1 : LIMIT
      });
      this.col.url = opts.url;
      this.listenTo(this.col, "finished", function() {
        this.stopListening();
        return this.$el.off();
      });
      this.listenTo(this.col, "error", function() {
        this.stopListening();
        return this.$el.off();
      });
      this.listenTo(this.col, "all", this.change);
      return this.listenTo(this.col, "add", function(model) {
        return this.trigger("append", model);
      });
    };

    _Class.prototype.change = function(event) {
      var matches;
      switch (event) {
        case "request":
          return this.toggle(true);
        case "sync":
          return this.toggle(false);
        case "finished":
          this.toggle(false);
          return this.$el.addClass("finished");
        default:
          if (matches = event.match(/error:(\w+)/)) {
            this.toggle(false);
            return this.$el.addClass(matches[1]);
          }
      }
    };

    _Class.prototype.toggle = function(state) {
      return this.$el.toggleClass("active", state);
    };

    Collection = (function(superClass1) {
      var FETCH_OPTS;

      extend(Collection, superClass1);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      FETCH_OPTS = {
        add: true,
        remove: false,
        merge: false
      };

      Collection.prototype.model = (function(superClass2) {
        extend(_Class, superClass2);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.html = function() {
          return this.get("html");
        };

        return _Class;

      })(Backbone.Model);

      Collection.prototype.initialize = function(models, opts) {
        return this.timeout = opts.timeout, this.limit = opts.limit, opts;
      };

      Collection.prototype.parse = function(resp) {
        return resp.articles;
      };

      Collection.prototype.fetch = function() {
        return Collection.__super__.fetch.call(this, _.extend(FETCH_OPTS, {
          timeout: this.timeout,
          data: {
            offset: this.length,
            limit: this.limit
          },
          success: (function(_this) {
            return function(col, resp) {
              if (resp.finished === true) {
                return _this.trigger("finished");
              }
            };
          })(this),
          error: (function(_this) {
            return function(col, xhr, opts) {
              if (opts.errorThrown === "timeout") {
                return _this.trigger("error:timeout");
              } else if (opts.errorThrown === "Not Found") {
                return _this.trigger("error:notfound");
              } else {
                return _this.trigger("error:error");
              }
            };
          })(this)
        }));
      };

      return Collection;

    })(Backbone.Collection);

    return _Class;

  })(Backbone.View);

}).call(this);
